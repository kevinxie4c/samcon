package odemocap;

import java.io.FileInputStream;
import java.io.ObjectInputStream;

import javax.vecmath.Tuple3d;

/**
 * Container for loaded c3d data.
 *
 * The c3d file must be converted to a java binary file using
 * a matlab script.  Our convention is to create a file with a
 * .javabin ending to signify that it contains java objects.
 * 
 * Use "MATLAB C3D driver" from http://www.c3d.org/c3dapps.html
 * to load c3d in matlab, then use the following script to save
 * in a java compatible format:
 * 
 *  dofs = zeros(size(Markers,1), size(Markers,2)*size(Markers,3));
 *  dofs(:,1:3:end) = Markers(:,:,1);
 *  dofs(:,2:3:end) = Markers(:,:,2);
 *  dofs(:,3:3:end) = Markers(:,:,3);
 *  fos = java.io.FileOutputStream(fname);
 *  oos = java.io.ObjectOutputStream(fos);
 *  oos.writeObject( dofs );
 *  oos.close;
 *  fos.close;
 *  
 * @author kry
 */
public class C3DData {

    /**
     * Name of the loaded file
     */
    private String name = "";
    
    /**
     * Marker data indexed by frames and by degree of freedom.
     * Order of the coordinates may vary
     */
    private double[][] dofs = null;

    /**
     * Defines possible orderings of the coordinates in the c3d file.
     * Feel free to expand this list as required if you find other data
     * that doesn't respect the orderings already defined.
     */
    public enum CoordinateOrder { 
        /** X -Z Y order (for NaturalPoint C3D exports use this) */
        XnZY, 
        /** Z X Y order (for CMU data found at http://mocap.cs.cmu.edu/ use this) */
        ZXY 
    }
    
    /**
     * Order of the coordinates loaded from the c3d file.  This defaults to the
     * natural point standard, CoordinateOrder.XnZY
     */
    CoordinateOrder coordinateOrder = CoordinateOrder.XnZY;    
    
    
    /**
     * Gets the number of frames in the loaded c3d file.
     * @return number of frames
     */
    public int getNumFrames() {
        if ( dofs == null ) return 0;
        return dofs.length;
    }
    
    /**
     * Gets the number of markers in the loaded c3d file.
     * @return number of markers
     */
    public int getNumMarkers() {
        if ( dofs == null ) return 0;
        return dofs[0].length/3;
    }
    
    /**
     * @return the name of the loaded file
     */
    public String getName() {
        return name;
    }
    
    /**
     * Loads c3d marker data from a file generated by matlab.
     * The matrix loaded from the java binary file has one
     * row for each frame and 3n columns where n is the number
     * of markers.  
     * 
     * The order of the individual x y z marker coordinates 
     * may vary from file to file.  Use the swapXZ option to
     * control how the data is interpreted to bring it into 
     * the correct frame.
     * 
     * @param fileName
     */
    public void load( String fileName )  {
        System.out.println( "Loading: " + fileName );
        this.name = fileName;
        Object obj = null;
        try {
            FileInputStream fis = new FileInputStream(fileName);
            ObjectInputStream oos = new ObjectInputStream( fis );
            obj = oos.readObject();
            dofs = (double[][]) obj;
            oos.close();
            fis.close();
        } catch ( Exception e ) {
            e.printStackTrace();
        } 
    }
    
    /**
     * Gets the specified marker for the given frame number.  
     * Units are typically mm.  Coordinate order and sign is
     * altered based on 
     * @param frame
     * @param marker
     * @param p modified to contain the marker position
     */
    public void getMarker( int frame, int marker, Tuple3d p ) {
        switch ( coordinateOrder ) {
        case XnZY:       
            p.x =  dofs[frame][marker*3];
            p.z = -dofs[frame][marker*3+1];
            p.y =  dofs[frame][marker*3+2];
            break;
        case ZXY:
            p.z =  dofs[frame][marker*3];
            p.x =  dofs[frame][marker*3+1];
            p.y =  dofs[frame][marker*3+2];
            break;
        }
    }
}
